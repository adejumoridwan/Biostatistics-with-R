---
title: "Variables"
author: "Adejumo Ridwan Suleiman"
output: html_document
---

## Variables

Of course, R is so much more than just a fancy calculator. To unlock its full potential, we need to discuss two key concepts: *variables* (used for storing data).

### Storing data

Without data, no data analytics. So how can we store and read data in R? The answer is that we use *variables*. A variable is a name used to store data, so that we can refer to a dataset when we write code. As the name *variable* implies, what is stored can change over time.

The code

```{r eval=FALSE}
x <- 4
```

is used to *assign* the value `4` to the *variable* `x`. It is read as "assign `4` to `x`". The `<-` part is made by writing a less than sign (`<`) and a hyphen (`-`) with no space between them[^1].

[^1]: In RStudio, you can also create the assignment operator `<-` by using the keyboard shortcut Alt+- (i.e. press Alt and the - button at the same time).

If we now type `x` in the Console, R will return the answer `4`. Well, almost. In fact, R returns the following rather cryptic output:

``` {eval="FALSE"}
[1] 4
```

The meaning of the `4` is clear - it's a 4. We'll return to what the `[1]` part means soon.

Now that we've created a variable, called `x`, and assigned a value (4) to it, `x` will have the value 4 whenever we use it again. This works just like a mathematical formula, where we for instance can insert the value $x=4$ into the formula $x+1$. The following two lines of code will compute $x+1=4+1=5$ and $x+x=4+4=8$:

```{r eval=FALSE}
x + 1
x + x
```

Once we have assigned a value to `x`, it will appear in the Environment panel in RStudio, where you can see both the variable's name and its value.

The left-hand side of the assignment `x <- 4` is always the name of a variable, but the right-hand side can be any piece of code that creates some sort of object to be stored in the variable. For instance, we could perform a computation on the right-hand side and then store the result in the variable:

```{r eval=FALSE}
x <- 1 + 2 + 3 + 4
```

R first evaluates the entire right-hand side, which in this case amounts to computing 1+2+3+4, and then assigns the result (10) to `x`. Note that the value previously assigned to `x` (i.e. `4`) now has been replaced by `10`. After a piece of code has been run, the values of the variables affected by it will have changed. There is no way to revert the run and get that `4` back, save to rerun the code that generated it in the first place.

You'll notice that in the code above, I've added some spaces, for instance between the numbers and the plus signs. This is simply to improve readability. The code works just as well without spaces:

```{r eval=FALSE}
x<-1+2+3+4
```

or with spaces in some places but not in others:

```{r eval=FALSE}
x<- 1+2+3 + 4
```

However, you can not place a space in the middle of the `<-` arrow. The following will not assign a value to `x`:

```{r eval=FALSE}
x < - 1 + 2 + 3 + 4
```

Running that piece of code rendered the output `FALSE`. This is because `< -` with a space has a different meaning than `<-` in R.

In rare cases, you may want to switch the direction of the arrow, so that the variable names is on the right-hand side. This is called right-assignment and works just fine too:

```{r eval=FALSE}
2 + 2 -> y
```

Later on, we'll see plenty of examples where right-assignment comes in handy.

#### Exercise

Do the following using R: 1. Compute the sum 924+124 and assign the result to a variable named `a`. 2. Compute a\*a

### What's in a name?

You now know how to assign values to variables. But what should you call your variables? Of course, you can follow the examples in the previous section and give your variables names like `x`, `y`, `a` and `b`. However, you don't have to use single-letter names, and for the sake of readability, it is often preferable to give your variables more informative names. Compare the following two code chunks:

```{r eval=FALSE}
y <- 100
z <- 20
x <- y - z
```

and

```{r eval=FALSE}
income <- 100
taxes <- 20
net_income <- income - taxes
```

```{r eval=FALSE}
#############################################################
#  This lovely little code snippet can be used to compute   #
#                   your net income.                        #
#############################################################
# Set income and taxes:
income <- 100  # Replace 100 with your income
taxes <- 20    # Replace 20 with how much taxes you pay
# Compute your net income:
net_income <- income - taxes
```

In the Script panel in RStudio, you can comment and uncomment (i.e. remove the `#` symbol) a row by pressing Ctrl+Shift+C on your keyboard. This is particularly useful if you wish to comment or uncomment several lines - simply select the lines and press Ctrl+Shift+C.

#### Exercise

1.  What happens if you use an invalid character in a variable name? Try e.g. the following:

```{r eval=FALSE}
net income <- income - taxes
net-income <- income - taxes
ca$h <- income - taxes
```

2.  What happens if you put R code as a comment? E.g.:

```{r eval=FALSE}
income <- 100
taxes <- 20
net_income <- income - taxes
# gross_income <- net_income + taxes
```

3.  What happens if you remove a line break and replace it by a semicolon `;`? E.g.:

```{r eval=FALSE}
income <- 200; taxes <- 30
```

4.  What happens if you do two assignments on the same line? E.g.:

```{r eval=FALSE}
income2 <- taxes2 <- 100
```

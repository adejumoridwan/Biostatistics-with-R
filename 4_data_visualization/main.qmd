---
title: "Data Visualization"
author: "Adejumo Ridwan Suleiman"
format: revealjs
---

# What is Data Visualization?

## What is Data Visualization?

- Graphical representation of data using charts and plots.
- Easily communicate information making it easy to understand.

## Types of Data Visualization

- Histogram

- Bar Chart

- Box plot

- Pie Chart

- Scatter plot

- Line Graph

- Frequency Polygon

# Histogram

## Histogram

- Used with discrete or continuous data
- Shows the underlying distribution of a data
- The data is split into intervals called *bins*
- Each bin contains the number of occurrences of scores in the data set contained within that bin.

## Histogram

```{r echo=FALSE}
# Load required library
library(ggplot2)

# Load the ChickWeight dataset (it's built into R)
data(ChickWeight)

# Create the histogram
ggplot(ChickWeight, aes(x = weight)) +
  geom_histogram(binwidth = 20, fill = "skyblue", color = "black") +
  labs(title = "Histogram of Chick Weights",
       x = "Weight (grams)",
       y = "Frequency") +
  theme_minimal()
```


# Bar Chart

## Bar Chart

- Used with categorical data
- Bars are either plotted horizontally or vertically
- Compares various categories

## Bar Chart

```{r echo=FALSE}
# Load required libraries
library(dplyr)

# Load the msleep dataset (it's built into R)
data(msleep)

# Create a summary of sleep time by order
sleep_summary <- msleep %>%
  group_by(order) %>%
  summarise(avg_sleep = mean(sleep_total, na.rm = TRUE)) %>%
  arrange(desc(avg_sleep)) |> 
  top_n(5)

# Create the bar chart
ggplot(sleep_summary, aes(x = order, y = avg_sleep, fill = order)) +
  geom_bar(stat = "identity") +
  theme_minimal() +
  labs(title = "Average Total Sleep Time by Mammalian Order",
       x = "Order",
       y = "Average Total Sleep (hours)") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

## Difference between histogram and bar chart

| Feature | Histogram | Bar Chart |
| --- | --- | --- |
|Data type | Used with numerical data | Used with categorical data |
| Purpose | Represents the distribution of numerical data | Compares different categories or groups |
| Bars | Touch each other (no gaps) | Separated by spaces |

# Box Plot

## Box plot

- Also known as box and whisker plot
- Used to measure the measures of central tendency in a data
- Used with numerical data
- Divides a data into 4 parts

## Box Plot

```{r echo=FALSE}

# Load the ToothGrowth dataset (built-in)
data("ToothGrowth")

# Create the box plot
ggplot(ToothGrowth, aes(x = supp, y = len, fill = supp)) +
  geom_boxplot() +
  labs(title = "Tooth Growth by Supplement Type",
       x = "Supplement Type",
       y = "Tooth Length",
       fill = "Supplement Type") +
  theme_minimal()

```


## Box Plot

![Different parts of a boxplot. Source: [BYJU](https://byjus.com/maths/box-plot/)](images/boxplot.jpg)


# Pie Chart

## Pie Chart

- Circular graph divided into slices
- Used mostly with categorical data
- Each slice represents the frequency of a particular category in percentage
- The entire pie represents 100%

## Pie Chart

```{r  echo=FALSE}

# Create a sample medical dataset
diagnoses <- data.frame(
  Condition = c("Hypertension", "Diabetes", "Asthma", "Arthritis", "Depression"),
  Count = c(150, 100, 75, 50, 25)
)

# Calculate percentages
diagnoses$Percentage <- diagnoses$Count / sum(diagnoses$Count) * 100

# Create the pie chart
ggplot(diagnoses, aes(x = "", y = Count, fill = Condition)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar("y", start = 0) +
  labs(title = "Distribution of Patient Diagnoses",
       fill = "Medical Condition") +
  theme_void() +
  theme(legend.position = "right") +
  geom_text(aes(label = sprintf("%.1f%%", Percentage)), 
            position = position_stack(vjust = 0.5))
```

# Scatter plot

## Scatter Plot

- Can be used to compare two continuous variables
- Used in also determining the relationship between two variables

## Scatter plot

```{r echo=FALSE}
library(MASS)  # For the birthwt dataset

# Load the birthwt dataset (low birth weight study)
data(birthwt)

# Create the scatter plot
ggplot(birthwt, aes(x = lwt, y = bwt)) +
  geom_point(alpha = 0.6) +
  labs(title = "Mother's Weight vs Baby's Birth Weight",
       x = "Mother's Weight (pounds)",
       y = "Baby's Birth Weight (grams)") +
  theme_minimal()
```


# Line Graph

## Line Graph

- Represents change in a variable with respect to time.
- For example, change in the population of a city in the past two decades.
- Used to represent quantitative data by plotting each variable value with respect to the time of occurence.


## Line Graph

```{r echo=FALSE}
library(zoo)

# Load the AirPassengers dataset
df = data(AirPassengers)

# Convert the time series to a data frame
df <- data.frame(
  date = as.Date(time(AirPassengers)),
  passengers = as.vector(AirPassengers)
)

# Create the time series plot
ggplot(df, aes(x = date, y = passengers)) +
  geom_line(color = "red") +
  labs(title = "Monthly Airline Passengers (1949-1960)",
       x = "Date",
       y = "Number of Passengers") +
  theme_minimal()
```


# Frequency Polygon

## Frequency Polygon

- Similar to a histogram
- Used to visualize the underlying distribution of a continuous variable


## Frequency Polygon

```{r echo=FALSE}
# Load required libraries
library(ggplot2)

# Load the ToothGrowth dataset
data(ToothGrowth)

# Create the frequency polygon
ggplot(ToothGrowth, aes(x = len)) +
  geom_freqpoly(binwidth = 2, color = "blue") +
  labs(title = "Frequency Polygon of Tooth Length",
       x = "Tooth Length",
       y = "Frequency") +
  theme_minimal()
```

## Frequency polygon from histogram

```{r echo=FALSE}
# Load required libraries
library(ggplot2)

# Load the ToothGrowth dataset
data(ToothGrowth)

# Create the histogram with frequency polygon
ggplot(ToothGrowth, aes(x = len)) +
  geom_histogram(aes(y = after_stat(density)), binwidth = 2, fill = "lightblue", color = "black") +
  geom_freqpoly(aes(y = after_stat(density)), binwidth = 2, color = "red") +
  labs(title = "Histogram and Frequency Polygon of Tooth Length",
       x = "Tooth Length",
       y = "Density") +
  theme_minimal()
```

